status = error
dest = err
name = PropertiesConfig

property.analysisLog = logs/analysis.log
property.parseLog = logs/parse.log

property.filePattern = %d{YYYY-MM-dd HH:mm:ss.SSS} [%-5level] - %m%n

filter.threshold.type = ThresholdFilter
filter.threshold.level = debug

# info can still go to stdout
appender.info.type = Console
appender.info.name = STDOUT
appender.info.target = SYSTEM_OUT
appender.info.layout.type = PatternLayout
appender.info.layout.pattern = %m%n
appender.info.filter.threshold.type = LevelRangeFilter
appender.info.filter.threshold.minLevel = warn
appender.info.filter.threshold.maxLevel = all
appender.info.filter.threshold.onMatch = accept
appender.info.filter.threshold.onMismatch = deny

# errors are always output to stderr
appender.console.type = Console
appender.console.name = STDERR
appender.console.target = SYSTEM_ERR
appender.console.layout.type = PatternLayout
appender.console.layout.pattern = %m%n
appender.console.filter.threshold.type = ThresholdFilter
appender.console.filter.threshold.level = error

# all logs go to the logfile
appender.file.type = File
appender.file.name = File
appender.file.fileName = ${analysisLog}
appender.file.layout.type = PatternLayout
appender.file.layout.pattern = ${filePattern}
appender.file.append = false
# create on demand is important so that the file were not currently using won't be wiped
appender.file.createOnDemand = true


# all logs from the parse go to a different file
appender.parser.type = File
appender.parser.name = ParserFile
appender.parser.fileName = ${parseLog}
appender.parser.layout.type = PatternLayout
appender.parser.layout.pattern = ${filePattern}
appender.parser.append = false
appender.parser.createOnDemand = true


logger.file.name = FileLogger
logger.file.level = debug
logger.file.additivity = false
logger.file.appenderRef.file.ref = File
logger.file.appenderRef.console.ref = STDERR

logger.parser.name = ParseLogger
logger.parser.level = debug
logger.parser.additivity = false
logger.parser.appenderRef.parser.ref = ParserFile
logger.parser.appenderRef.console.ref = STDERR


rootLogger.level = info
rootLogger.appenderRef.stderr.ref = STDERR