;---------------------------------------------------------------;
; Config file for Android Security Profiler                     ;
;                                                               ;
; About the syntax:                                             ;
;   Sections are indicated by [section_name]                    ;
;   Each section contains a set of key = value statements       ;
;   It is possible to reference one key, value pair in another, ;
;   by using ${section/key}                                     ;
;   It is also possible to reference environment variables,     ;
;   by using %environment_variable%                             ;
;                                                               ;
; Adding a tool in the toolchain:                               ;
;   After writing a class for the new tool that extends the     ;
;   Investigator class, the final step is to create a section   ;
;   for it in this configuration file.                          ;
;   This can be done by copying an existing entry, or by        ;
;   copying the example section at the end of this file and     ;
;   filling in the missing values.                              ;
;   Note that you have full access to the settings in this file ;
;   in your tool's investigator class, so you can add any other ;
;   settings for you to use as well.                            ;
;                                                               ;
; Path of current apk in the investigation:                     ;
;   Of course, in your settings you might want to refer to the  ;
;   path of the current apk that is being investigated.         ;
;   Therefore there is a special keyword available that can be  ;
;   resolved to that path.                                      ;
;   In order to get this path, simply use @CURRENT_APK, and     ;
;   pass your fetched string through the resolveKeywords()      ;
;   function in the Investigator class.                         ;
;                                                               ;
; Adding more than one command for one tool                     ;
;   Sometimes, it could be useful to add a list of commands     ;
;   instead of just one, possibly to do some setup or cleanup,  ;
;   or to run a tool multiple times with different parameters.  ;
;   To achieve this, you can simply add more lines with the     ;
;   'execution_command' key, as seen in the example at the end  ;
;   of this file.                                               ;
;   The commands will be executed in the same order that they   ;
;   are declared in.                                            ;
;   For more customizability, it is recommended to create a     ;
;   batch file that will execute all of you commands and adding ;
;   that to the toolchain instead of each command separately.   ;
;                                                               ;
; Suppressing Warnings:                                         ;
;   By default, a warning is printed when a command exits with  ;
;   a non zero exit code. However, if this is highly            ;
;   unimportant for the command (e.g. mkdir returns 1 if the    ;
;   dir already exists) you can add a key named                 ;
;   'suppress_exit_code_warning_[cmd_index]' where [cmd_index]  ;
;   is the index of the command in your section (start at 0),   ;
;   and set its value to true.                                  ;
;                                                               ;
; About Path Separators:                                        ;
;   When specifying a path separator in this file directly, it  ;
;   should either be a forward slash (/) or the backslash       ;
;   should be escaped by another backslash (\\).                ;
;   Note that system variables are not affected by this, i.e.   ;
;   if you have a system variable that is 'C:\Some\Dir', and    ;
;   you refer to it as %VAR_NAME%, this will work fine.         ;
;                                                               ;
; More information:                                             ;
;   For more information about how to use this file in your     ;
;   code, please refer to the ini4j documentation, found at     ;
;   http://ini4j.sourceforge.net/index.html                     ;
;                                                               ;
; Finally:                                                      ;
;   Note that you might have to edit some fields to work on     ;
;   your machine. This file is only meant as a starting point.  ;
;                                                               ;
;---------------------------------------------------------------;

; Contains general settings for the program
[General]
tool_path = %APK_TOOLS%
android_home = %ANDROID_HOME%
; mkdir needs to be run inside cmd.exe, so we provide a shortcut to this call
mkdir = cmd.exe /c mkdir

; Amandroid is also known as Argus-SAF
[AmanDroid_Icon]
enabled = true
; note that the tool output dir is simply 'AmanDroid',
; this is so all versions of amandroid in this file can use the same output
; this will greatly improve speed, as this means each apk only has to be decompiled once
execution_command = java -jar argus-saf.jar a -c HIDE_ICON @CURRENT_APK -o @OUTPUT_DIR/tool_output/AmanDroid
execution_pwd = ${General/tool_path}/Argus-SAF
save_stderr = if_useful


[AmanDroid_Crypto]
enabled = true
execution_command = java -jar argus-saf.jar a -c CRYPTO_MISUSE @CURRENT_APK -o @OUTPUT_DIR/tool_output/AmanDroid
execution_pwd = ${General/tool_path}/Argus-SAF
save_stderr = if_useful


[AmanDroid_SSLTLS]
enabled = true
execution_command = java -jar argus-saf.jar a -c SSLTLS_MISUSE @CURRENT_APK -o @OUTPUT_DIR/tool_output/AmanDroid
execution_pwd = ${General/tool_path}/Argus-SAF
save_stderr = if_useful


[AndroBugs]
enabled = true
execution_command = ${General/mkdir} ${AndroBugs/output_dir}
execution_command = androbugs.exe -f @CURRENT_APK -v -o ${AndroBugs/output_dir}
execution_pwd = ${General/tool_path}/AndroBugs_Framework
output_dir = @OUTPUT_DIR/tool_output/AndroBugs
continue_on_error = true
suppress_exit_code_warning_0 = true
save_stderr = if_useful


[AndroWarn]
enabled = true
; androwarn needs the output directory to already exist, otherwise it will throw an error
execution_command = ${General/mkdir} @OUTPUT_DIR/tool_output/AndroWarn
suppress_exit_code_warning_0 = true
execution_command = py -3 androwarn.py -i @CURRENT_APK -o ${AndroWarn/output_file} -r ${AndroWarn/report_type} -v 3
execution_pwd = ${General/tool_path}/androwarn
report_type = txt
output_file = @OUTPUT_DIR/tool_output/AndroWarn/@APK_NAME_results.${AndroWarn/report_type}
continue_on_error = true
save_stderr = if_useful
# setting these environment variables regarding encoding to utf-8 fixes 'UnicodeEncodeError'
ENV_VAR_LANG = en_US.UTF_8
ENV_VAR_PYTHONIOENCODING = utf-8


[FileScan]
enabled = true
execution_command = py -2 test_filescan_class.py -i @CURRENT_APK
execution_pwd = ${General/tool_path}/filescan
save_stderr = if_useful


[FlowDroid]
enabled = true
execution_command = ${General/mkdir} ${FlowDroid/output_dir}
suppress_exit_code_warning_0 = true
execution_command = java -jar flowdroid.jar -a @CURRENT_APK -p ${General/android_home}/platforms -s default_sas.txt -o ${FlowDroid/output_file}
execution_pwd = ${General/tool_path}/FlowDroid
output_dir = @OUTPUT_DIR/tool_output/FlowDroid
output_file = ${FlowDroid/output_dir}/@APK_NAME_results.xml
continue_on_error = true
save_stderr = if_useful


[QuarkEngine]
enabled = true
execution_command = pipenv run quark -a @CURRENT_APK -s -r ./quark/rules
execution_pwd = ${General/tool_path}/quark-engine
save_stderr = if_useful
# setting these environment variables regarding encoding to utf-8 fixes 'UnicodeEncodeError'
ENV_VAR_LANG = en_US.UTF_8
ENV_VAR_PYTHONIOENCODING = utf-8


[RiskInDroid]
enabled = true
execution_command = py -3 app/offline.py @CURRENT_APK
execution_pwd = ${General/tool_path}/RiskInDroid
save_stderr = if_useful


; NOTE that by default, Windows Defender will prevent SUPER from completing its analysis
; if the apk is deemed as dangerous. Therefore, it is recommended to add the SUPER folder
; to Windows Defender exclusions
[SUPER]
enabled = true
execution_command = cmd.exe /c super-analyzer.exe --json --downloads @APK_PARENT_FILE --min-criticality Low --results ${SUPER/output_dir} --rules "${SUPER/rules_path}" @APK_NAME
execution_pwd = ${General/tool_path}/SUPER
save_stderr = if_useful
output_dir = @OUTPUT_DIR/tool_output/SUPER/@APK_NAME
rules_path = ${SUPER/execution_pwd}/rules.json


; This example shows how to use most of the features in practice
[ExampleTool]
enabled = false
; do some setup, like create a folder for the output
execution_command = ${General/mkdir} ./output
; we probably don't need a warning if mkdir returns non zero
suppress_exit_code_warning_0 = true
; execute the tool
execution_command = java -jar somejar.jar --mode1
; execute the tool again, but with a different mode
execution_command = java -jar somejar.jar --mode2
; finally clean up some temp file that the tool leaves
execution_command = rm ./temp/temp.txt
; continue_on_error determines whether the rest of the commands
; should still be executed if one exited with a non-zero exit code
continue_on_error = true
execution_pwd = ${General/tool_path}/example_tool
; save_stderr determines whether the tool's output from
; stderr should be saved.
; setting this to true or false is self explanatory,
; setting it to 'on_error' will only save it if the program exited
; with a non-zero exit code
; 'not_empty' will save it if there was something printed to stderr
; 'if_useful' will save stderr if either of those conditions were met
save_stderr = if_useful